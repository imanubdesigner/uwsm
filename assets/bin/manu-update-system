#!/bin/bash

#    ┳┳┏┓┳┓┏┓┏┳┓┏┓  ┏┓┓┏┏┓┏┳┓┏┓┳┳┓
#    ┃┃┃┃┃┃┣┫ ┃ ┣   ┗┓┗┫┗┓ ┃ ┣ ┃┃┃
#    ┗┛┣┛┻┛┛┗ ┻ ┗┛  ┗┛┗┛┗┛ ┻ ┗┛┛ ┗
#            ┏┓┏┓┳┓┳┏┓┏┳┓
#            ┗┓┃ ┣┫┃┃┃ ┃
#            ┗┛┗┛┛┗┻┣┛ ┻
#                        by Manu
#

# ────────────────────────────────────────────────
#  Check for terminal
# ────────────────────────────────────────────────
if [ ! -t 1 ]; then
  exec uwsm-app -- "$TERMINAL" --class=PkgUpdate -e bash "$0" "$@"
fi

# ────────────────────────────────────────────────
#  Settings
# ────────────────────────────────────────────────
PACMAN="sudo pacman -Syu"
PACMAN_LOG="/var/log/pacman.log"
STATE_DIR="$HOME/.local/state/manu"
mkdir -p "$STATE_DIR"

# Colors
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
RESET="\e[0m"

# ────────────────────────────────────────────────
#  Functions
# ────────────────────────────────────────────────
print_info() {
  printf "%b\n" "${YELLOW}󰣇  [$(date '+%H:%M:%S')] $1${RESET}"
}

print_ok() {
  echo -e "${GREEN}󰄬  $1${RESET}"
}

print_err() {
  echo -e "${RED}󰅚  $1${RESET}"
}

# ────────────────────────────────────────────────
#  Start update
# ────────────────────────────────────────────────
print_info "  Starting system update..."
notify-send "  System update" "󰏔  Starting update..." -a "Update Script"

LAST_LOG_LINE=$(wc -l <"$PACMAN_LOG")

print_info "󰏔  Updating official packages..."
if $PACMAN; then
  print_ok "󰄳  Pacman update completed."
  notify-send "  System update" "󰄳  All packages are up to date." -a "Update Script"
else
  print_err "󰅚  Pacman update failed."
  notify-send "  System update" "󰅚  Update failed!" -a "Update Script" -u critical
  exit 1
fi

# ────────────────────────────────────────────────
#  Kernel update check
# ────────────────────────────────────────────────
KERNEL_UPDATED=false
if tail -n +$LAST_LOG_LINE "$PACMAN_LOG" | grep -qE "\[ALPM\] (upgraded|installed) linux(-[a-z0-9]+)? "; then
  KERNEL_UPDATED=true
  touch "$STATE_DIR/reboot-required"
fi

# ────────────────────────────────────────────────
#  Waybar cache refresh
# ────────────────────────────────────────────────
sleep 0.5
print_info "󰩹  Clearing Waybar update cache..."
rm -f /tmp/waybar-updates-cache 2>/dev/null
pkill -SIGRTMIN+8 waybar 2>/dev/null
print_ok "󰩹  Waybar cache cleared and refreshed."

# ────────────────────────────────────────────────
#  Post-update checks
# ────────────────────────────────────────────────

# Kernel update detected
if [ "$KERNEL_UPDATED" = true ]; then
  echo ""
  notify-send "  Kernel update detected" "  Reboot recommended." -a "Update Script"
  gum style \
    --border double \
    --border-foreground 111 \
    --margin "1 2" \
    --padding "1 2" \
    "  Linux kernel update detected!" \
    "  A new kernel version was installed." \
    "󰜉  Reboot required to apply changes."
  echo ""
  if gum confirm "󰜱  Reboot now?"; then
    rm -f "$STATE_DIR"/re*-required
    sudo reboot now
  else
    gum style --foreground 245 "󰒤  Remember to reboot later."
    notify-send "  Reboot postponed" "󰒤  Remember to reboot later." -a "Update Script"
  fi

# Previous reboot still required
elif [ -f "$STATE_DIR/reboot-required" ]; then
  echo ""
  notify-send "  Reboot required" "󰜉  Previous updates need reboot." -a "Update Script"
  gum style \
    --border double \
    --border-foreground 214 \
    --margin "1 2" \
    --padding "1 2" \
    "󰜉  System reboot required" \
    "  Previous updates need a reboot to take effect."
  echo ""
  if gum confirm "󰜱  Reboot now?"; then
    rm -f "$STATE_DIR"/re*-required
    sudo reboot now
  else
    gum style --foreground 245 "󰒤  Reboot later."
  fi
fi

# ────────────────────────────────────────────────
#  Service restart checks
# ────────────────────────────────────────────────
for file in "$STATE_DIR"/restart-*-required; do
  if [ -f "$file" ]; then
    service=$(basename "$file" | sed 's/restart-\(.*\)-required/\1/')
    echo ""
    print_info "  Service restart required: $service"
    if gum confirm "  Restart $service now?"; then
      print_info "󰑓  Restarting $service..."
      rm -f "$file"
      if command -v manu-restart-"$service" &>/dev/null; then
        manu-restart-"$service"
        print_ok "󰄳  $service restarted successfully."
      else
        print_err "󰅚  manu-restart-$service command not found!"
      fi
    else
      gum style --foreground 245 "󰒤  $service restart postponed."
    fi
  fi
done
