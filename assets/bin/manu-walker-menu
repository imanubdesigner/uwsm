#!/bin/bash

#    ┓ ┏┏┓┓ ┓┏┓┏┓┳┓  ┳┳┓┏┓┳┓┳┳
#    ┃┃┃┣┫┃ ┃┫ ┣ ┣┫  ┃┃┃┣ ┃┃┃┃
#    ┗┻┛┛┗┗┛┛┗┛┗┛┛┗  ┛ ┗┗┛┛┗┗┛
#                      by Manu

export PATH="$HOME/.local/bin:$PATH"

# Set to true when going directly to a submenu, so we can exit directly
BACK_TO_EXIT=false

back_to() {
  local parent_menu="$1"

  if [[ "$BACK_TO_EXIT" == "true" ]]; then
    exit 0
  elif [[ -n "$parent_menu" ]]; then
    "$parent_menu"
  else
    show_main_menu
  fi
}

menu() {
  local prompt="$1"
  local options="$2"
  local extra="$3"
  local preselect="$4"

  read -r -a args <<<"$extra"

  if [[ -n "$preselect" ]]; then
    local index
    index=$(echo -e "$options" | grep -nxF "$preselect" | cut -d: -f1)
    if [[ -n "$index" ]]; then
      args+=("-c" "$index")
    fi
  fi

  echo -e "$options" | manu-launch-walker --dmenu --width 295 --minheight 1 --maxheight 600 -p "$prompt…" "${args[@]}" 2>/dev/null
}

terminal() {
  $TERMINAL --class=Manu -e "$@"
}

present_terminal() {
  manu-launch-floating-terminal-with-presentation $1
}

open_in_editor() {
  notify-send "Editing config file" "$1"
  manu-launch-editor "$1"
}

install() {
  present_terminal "echo 'Installing $1...'; sudo pacman -S --noconfirm $2"
}

install_and_launch() {
  present_terminal "echo 'Installing $1...'; sudo pacman -S --noconfirm $2 && setsid gtk-launch $3"
}

install_font() {
  present_terminal "echo 'Installing $1...'; sudo pacman -S --noconfirm --needed $2 && sleep 2 && manu-font-set '$3'"
}

install_terminal() {
  present_terminal "manu-install-terminal $1"
}

aur_install() {
  present_terminal "echo 'Installing $1 from AUR...'; yay -S --noconfirm $2"
}

aur_install_and_launch() {
  present_terminal "echo 'Installing $1 from AUR...'; yay -S --noconfirm $2 && setsid gtk-launch $3"
}

show_learn_menu() {
  case $(menu "  Learn" "    Hyprland\n    Arch\n    Neovim\n    Bash\n  󱣻  Gowall\n  󰇥  Yazi") in
  *Hyprland*) manu-launch-webapp "https://wiki.hypr.land/" ;;
  *Arch*) manu-launch-webapp "https://wiki.archlinux.org/title/Main_page" ;;
  *Bash*) manu-launch-webapp "https://devhints.io/bash" ;;
  *Neovim*) manu-launch-webapp "https://www.lazyvim.org/keymaps" ;;
  *Gowall*) manu-launch-webapp "https://achno.github.io/gowall-docs/" ;;
  *Yazi*) manu-launch-webapp "https://yazi-rs.github.io/docs/quick-start/" ;;
  *) show_main_menu ;;
  esac
}

show_trigger_menu() {
  case $(menu "  Trigger" "    Capture\n  󰨚  Toggle") in
  *Capture*) show_capture_menu ;;
  *Toggle*) show_toggle_menu ;;
  *) show_main_menu ;;
  esac
}

show_capture_menu() {
  case $(menu "  Capture" "  󰄄  Screenshot\n    Screenrecord\n    Color") in
  *Screenshot*) show_screenshot_menu ;;
  *Screenrecord*) show_screenrecord_menu ;;
  *Color*) pkill hyprpicker || hyprpicker -a ;;
  *) show_trigger_menu ;;
  esac
}

show_screenshot_menu() {
  case $(menu "󰄄  Screenshot" \
    "  󰩬  Region – Copy only\n  󰩬  Region – Save file\n  󰩬  Region – Edit in Satty\n    Fullscreen – Copy only\n    Fullscreen – Save file\n    Fullscreen – Edit in Satty") in

  *"Region – Copy"*) manu-screenshot rc ;;
  *"Region – Save"*) manu-screenshot rf ;;
  *"Region – Edit"*) manu-screenshot ri ;;
  *"Fullscreen – Copy"*) manu-screenshot sc ;;
  *"Fullscreen – Save"*) manu-screenshot sf ;;
  *"Fullscreen – Edit"*) manu-screenshot si ;;
  *) show_capture_menu ;;
  esac
}

show_screenrecord_menu() {
  case $(menu "󰍹  Screen Record" \
    "  󰩬  Region\n  󰩬  Region + Audio\n    Fullscreen\n    Fullscreen + Audio") in
  *"Region + Audio"*) manu-cmd-screenrecord region --with-audio ;;
  *Region*) manu-cmd-screenrecord region ;;
  *"Fullscreen + Audio"*) manu-cmd-screenrecord output --with-audio ;;
  *Fullscreen*) manu-cmd-screenrecord output ;;
  *) show_capture_menu ;;
  esac
}

show_toggle_menu() {
  case $(menu "󰨚  Toggle" "    Nightlight\n    Idle Lock\n  󰖯  Top Bar") in
  *Nightlight*) manu-night-toggle ;;
  *Idle*) manu-idle-toggle ;;
  *Bar*) manu-waybar-toggle ;;
  *Mute*) manu-mute-toggle ;;
  *) show_trigger_menu ;;
  esac
}

show_install_menu() {
  case $(menu "  Install" "  󰣇  Package\n  󰂓  AUR\n  󰖟  Web App\n  󰞷  TUI\n    Chromium") in
  *Package*) terminal manu-pkg-install ;;
  *AUR*) terminal manu-pkg-aur-install ;;
  *Web*) present_terminal manu-install-webapp ;;
  *TUI*) present_terminal manu-install-tui ;;
  *Chromium*) terminal manu-install-chromium-google-account ;;
  *) show_main_menu ;;
  esac
}

show_remove_menu() {
  case $(menu "  Remove" "  󰣇  Package\n    Web App\n    TUI\n  󰮯  Cache Packages") in
  *Cache*) terminal manu-packages-cleaning ;;
  *Package*) terminal manu-pkg-remove ;;
  *Web*) present_terminal manu-webapp-remove ;;
  *TUI*) present_terminal manu-tui-remove ;;
  *) show_main_menu ;;
  esac
}

show_update_menu() {
  case $(menu "󰚰  Update" "  󰣇  Pacman") in
  *Pacman*) present_terminal manu-update-system ;;
  *) show_main_menu ;;
  esac
}

show_restart_menu() {
  case $(menu "  Restart" "  󰄄  Apps\n  󰘓  Hardware") in
  *Apps*) show_restart_apps_menu ;;
  *Hardware*) show_restart_hardware_menu ;;
  *) show_main_menu ;;
  esac
}

show_restart_apps_menu() {
  case $(menu "  Restart Apps" \
    "  󰡗  Sudo\n  󱓞  Walker\n    Waybar\n    Hypridle\n    Hyprsunset") in
  *Sudo*) present_terminal manu-reset-sudo ;;
  *Walker*) manu-restart-walker ;;
  *Waybar*) manu-restart-waybar ;;
  *Hypridle*) manu-restart-hypridle ;;
  *Hyprsunset*) manu-restart-hyprsunset ;;
  *) show_restart_menu ;;
  esac
}

show_restart_hardware_menu() {
  case $(menu "  Restart Hardware" \
    "    Audio\n  󱚾  Wi-Fi\n  󰂯  Bluetooth") in
  *Audio*) present_terminal manu-restart-pipewire ;;
  *Wi-Fi*) present_terminal manu-restart-wifi ;;
  *Bluetooth*) present_terminal manu-restart-bluetooth ;;
  *) show_restart_menu ;;
  esac
}

show_tools_menu() {
  case $(menu "  Tools" " 󰦗  Media Downloader\n  󱣻  Gowall\n  󱊞  ISO to USB\n  󰣌  Image Converter\n    Video Converter") in
  *"Media Downloader"*) present_terminal manu-media-download ;;
  *Gowall*) present_terminal manu-gowall-tool ;;
  *"ISO to USB"*) present_terminal manu-write-iso ;;
  *"Image Converter"*) present_terminal manu-transcode-image ;;
  *"Video Converter"*) present_terminal manu-transcode-video ;;
  *) show_main_menu ;;
  esac
}

show_system_menu() {
  case $(menu "󰍹  System" "  󰌾  Lock\n  󰒲  Suspend\n    Relaunch\n  󰜉  Restart\n    Shutdown") in
  *Lock*) manu-lock-screen ;;
  *Suspend*) systemctl suspend ;;
  *Relaunch*) uwsm stop ;;
  *Restart*) manu-state clear re*-required && systemctl reboot --no-wall ;;
  *Shutdown*) manu-state clear re*-required && systemctl poweroff --no-wall ;;
  *) back_to show_main_menu ;;
  esac
}

show_main_menu() {
  go_to_menu "$(menu "󰕰  Go" \
    "  󰵆  App\n    Learn\n    Trigger\n    Install\n    Remove\n  󰚰  Update\n    Restart\n    Tools\n  󰋽  About\n  󰍹  System")"
}

go_to_menu() {
  case "${1,,}" in
  *app*) walker -p "Launch…" ;;
  *learn*) show_learn_menu ;;
  *trigger*) show_trigger_menu ;;
  *share*) show_share_menu ;;
  *screenshot*) show_screenshot_menu ;;
  *screenrecord*) show_screenrecord_menu ;;
  *install*) show_install_menu ;;
  *remove*) show_remove_menu ;;
  *update*) show_update_menu ;;
  *restart*) show_restart_menu ;;
  *tools*) show_tools_menu ;;
  *about*) manu-launch-about ;;
  *system*) show_system_menu ;;
  esac
}

if [[ -n "$1" ]]; then
  BACK_TO_EXIT=true
  go_to_menu "$1"
else
  show_main_menu
fi
